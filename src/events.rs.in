#[derive(Debug, Deserialize)]
pub struct Value { pub json: serde_json::Value }

#[derive(Debug, Deserialize)]
pub enum Event {
    CheckRun {
        action: String,
        check_run: CheckRun1,
        repository: Repo,
        organization: Organization,
        sender: User,
        installation: Installation,
    },
    CheckSuite {
        action: String,
        check_suite: CheckSuite2,
        repository: Repo,
        organization: Organization,
        sender: User,
        installation: Installation,
    },
    CommitComment {
        action: String,
        comment: Comment,
        repository: Repo,
        sender: User,
    },
    ContentReference {
        action: String,
        content_reference: ContentReference1,
        repository: Repo,
        sender: User,
        installation: Installation1,
    },
    Create {
        #[serde(rename = "ref")]
        _ref: String,
        ref_type: String,
        master_branch: String,
        description: Option<String>,
        pusher_type: String,
        repository: Repo,
        sender: User,
    },
    Delete {
        #[serde(rename = "ref")]
        _ref: String,
        ref_type: String,
        pusher_type: String,
        repository: Repo,
        sender: User,
    },
    Deployment {
        deployment: Deployment1,
        repository: Repo,
        sender: User,
    },
    DeploymentStatus {
        deployment_status: DeploymentStatus1,
        deployment: Deployment1,
        repository: Repo,
        sender: User,
    },
    Fork {
        forkee: Forkee,
        repository: Repo,
        sender: User,
    },
    GithubAppAuthorization {
        action: String,
        sender: User,
    },
    Gollum {
        pages: Vec<Pages>,
        repository: Repo,
        sender: User,
    },
    Installation {
        action: String,
        installation: Installation3,
        repositories: Vec<Repositories>,
        sender: User,
    },
    InstallationRepositories {
        action: String,
        installation: Installation3,
        repository_selection: String,
        repositories_added: Vec<Repositories>,
        repositories_removed: Vec<Repositories>,
        sender: User,
    },
    IssueComment {
        action: String,
        issue: Issue,
        comment: Comment1,
        repository: Repo,
        sender: User,
    },
    Issues {
        action: String,
        issue: Issue,
        changes: (),
        repository: Repo,
        sender: User,
    },
    Label {
        action: String,
        label: Labels,
        repository: Repo,
        sender: User,
    },
    MarketplacePurchase {
        action: String,
        effective_date: Option<String>,
        sender: Sender,
        marketplace_purchase: MarketplacePurchase1,
    },
    Member {
        action: String,
        member: User,
        changes: Changes,
        repository: Repo,
        sender: User,
    },
    Membership {
        action: String,
        scope: String,
        member: User,
        sender: User,
        team: Team,
        organization: Organization,
    },
    Milestone {
        action: String,
        milestone: Milestone1,
        repository: Repo,
        sender: User,
    },
    OrgBlock {
        action: String,
        blocked_user: User,
        organization: Organization,
        sender: User,
    },
    Organization {
        action: String,
        membership: Membership1,
        organization: Organization,
        sender: User,
    },
    PageBuild {
        id: i64,
        build: Build,
        repository: Repo,
        sender: User,
    },
    Project {
        action: String,
        project: Project1,
        repository: Repo,
        sender: User,
    },
    ProjectCard {
        action: String,
        project_card: ProjectCard1,
        repository: Repo,
        sender: User,
    },
    ProjectColumn {
        action: String,
        project_column: ProjectColumn1,
        repository: Repo,
        sender: User,
    },
    Public {
        repository: Repo,
        sender: User,
    },
    PullRequest {
        action: String,
        number: i64,
        pull_request: PullRequests,
        label: Labels,
        repository: Repo,
        organization: Organization,
        sender: User,
    },
    PullRequestReview {
        action: String,
        review: Review,
        pull_request: PullRequest1,
        repository: Repo,
        sender: User,
    },
    PullRequestReviewComment {
        action: String,
        comment: Comment2,
        pull_request: PullRequest1,
        repository: Repo,
        sender: User,
    },
    Push {
        #[serde(rename = "ref")]
        _ref: String,
        before: String,
        after: String,
        created: bool,
        deleted: bool,
        forced: bool,
        base_ref: Option<String>,
        compare: String,
        commits: Vec<Commits>,
        head_commit: String,
        repository: Repository,
        pusher: Author,
        sender: User,
    },
    Release {
        action: String,
        release: Release1,
        repository: Repo,
        sender: User,
    },
    Repository {
        action: String,
        repository: Repo,
        sender: User,
    },
    RepositoryImport {
        status: String,
        repository: Repo,
        organization: Organization,
        sender: User,
    },
    RepositoryVulnerabilityAlert {
        action: String,
        alert: Alert,
    },
    SecurityAdvisory {
        action: String,
        security_advisory: SecurityAdvisory1,
    },
    Status {
        id: i64,
        sha: String,
        name: String,
        target_url: Option<String>,
        context: String,
        description: Option<String>,
        state: String,
        commit: Commit,
        branches: Vec<Branches>,
        created_at: String,
        updated_at: String,
        repository: Repo,
        sender: User,
    },
    Team {
        action: String,
        team: Team,
        repository: Repository2,
        organization: Organization,
        sender: User,
    },
    TeamAdd {
        team: Team,
        repository: Repo,
        organization: Organization,
        sender: User,
    },
    Watch {
        action: String,
        repository: Repo,
        sender: User,
    },
}

#[derive(Debug, Deserialize)]
pub struct Account {
  #[serde(rename = "type")]
  pub _type: String,
  pub id: i64,
  pub login: String,
  pub organization_billing_email: Option<String>,
}

#[derive(Debug, Deserialize)]
pub struct Alert {
  pub id: i64,
  pub affected_range: String,
  pub affected_package_name: String,
  pub external_reference: String,
  pub external_identifier: String,
  pub fixed_in: String,
  pub dismisser: User,
  pub dismiss_reason: String,
  pub dismissed_at: String,
}

#[derive(Debug, Deserialize)]
pub struct App {
  pub id: i64,
  pub node_id: String,
  pub owner: User,
  pub name: String,
  pub description: Option<String>,
  pub external_url: String,
  pub html_url: String,
  pub created_at: String,
  pub updated_at: String,
}

#[derive(Debug, Deserialize)]
pub struct Author {
  pub name: String,
  pub email: Option<String>,
}

#[derive(Debug, Deserialize)]
pub struct Author1 {
  pub name: Option<String>,
  pub email: Option<String>,
  pub username: Option<String>,
}

#[derive(Debug, Deserialize)]
pub struct Author2 {
  pub name: String,
  pub email: Option<String>,
  pub date: Option<String>,
}

#[derive(Debug, Deserialize)]
pub struct Branches {
  pub name: String,
  pub commit: Tree,
}

#[derive(Debug, Deserialize)]
pub struct Build {
  pub url: String,
  pub status: String,
  pub error: Error,
  pub pusher: User,
  pub commit: String,
  pub duration: i64,
  pub created_at: String,
  pub updated_at: String,
}

#[derive(Debug, Deserialize)]
pub struct Changes {
  pub permission: Permission,
}

#[derive(Debug, Deserialize)]
pub struct CheckRun1 {
  pub id: i64,
  pub head_sha: String,
  pub external_id: String,
  pub url: String,
  pub html_url: String,
  pub status: String,
  pub conclusion: String,
  pub started_at: String,
  pub completed_at: String,
  pub output: Output,
  pub name: String,
  pub check_suite: CheckSuite,
  pub app: App,
  pub pull_requests: Vec<PullRequests>,
}

#[derive(Debug, Deserialize)]
pub struct CheckSuite {
  pub id: i64,
  pub head_branch: String,
  pub head_sha: String,
  pub status: String,
  pub conclusion: String,
  pub url: String,
  pub before: String,
  pub after: String,
  pub pull_requests: Vec<PullRequests>,
  pub app: App,
  pub created_at: String,
  pub updated_at: String,
}

#[derive(Debug, Deserialize)]
pub struct CheckSuite2 {
  pub id: i64,
  pub head_branch: String,
  pub head_sha: String,
  pub status: String,
  pub conclusion: String,
  pub url: String,
  pub before: String,
  pub after: String,
  pub pull_requests: Vec<PullRequests>,
  pub app: App,
  pub created_at: String,
  pub updated_at: String,
  pub latest_check_runs_count: i64,
  pub check_runs_url: String,
  pub head_commit: HeadCommit,
}

#[derive(Debug, Deserialize)]
pub struct Comment {
  pub url: String,
  pub html_url: String,
  pub id: i64,
  pub node_id: String,
  pub user: User,
  pub position: Option<String>,
  pub line: Option<String>,
  pub path: Option<String>,
  pub commit_id: String,
  pub created_at: String,
  pub updated_at: String,
  pub author_association: String,
  pub body: Option<String>,
}

#[derive(Debug, Deserialize)]
pub struct Comment1 {
  pub url: String,
  pub html_url: String,
  pub issue_url: String,
  pub id: i64,
  pub node_id: String,
  pub user: User,
  pub created_at: String,
  pub updated_at: String,
  pub author_association: String,
  pub body: Option<String>,
}

#[derive(Debug, Deserialize)]
pub struct Comment2 {
  pub url: String,
  pub pull_request_review_id: i64,
  pub id: i64,
  pub node_id: String,
  pub diff_hunk: String,
  pub path: String,
  pub position: i64,
  pub original_position: i64,
  pub commit_id: String,
  pub original_commit_id: String,
  pub user: User,
  pub body: Option<String>,
  pub created_at: String,
  pub updated_at: String,
  pub html_url: String,
  pub pull_request_url: String,
  pub author_association: String,
  pub _links: Links2,
}

#[derive(Debug, Deserialize)]
pub struct Commit {
  pub sha: String,
  pub node_id: String,
  pub commit: Commit1,
  pub url: String,
  pub html_url: String,
  pub comments_url: String,
  pub author: User,
  pub committer: User,
}

#[derive(Debug, Deserialize)]
pub struct Commit1 {
  pub author: Author2,
  pub committer: Author2,
  pub message: String,
  pub tree: Tree,
  pub url: String,
  pub comment_count: i64,
  pub verification: Verification,
}

#[derive(Debug, Deserialize)]
pub struct Commits {
  pub id: String,
  pub tree_id: String,
  pub distinct: bool,
  pub message: String,
  pub timestamp: String,
  pub url: String,
  pub author: Author1,
  pub committer: Author1,
  pub added: Vec<String>,
  pub removed: Vec<String>,
  pub modified: Vec<String>,
}

#[derive(Debug, Deserialize)]
pub struct ContentReference1 {
  pub id: i64,
  pub node_id: String,
  pub reference: String,
}

#[derive(Debug, Deserialize)]
pub struct Deployment1 {
  pub url: String,
  pub id: i64,
  pub node_id: String,
  pub sha: String,
  #[serde(rename = "ref")]
  pub _ref: String,
  pub task: String,
  pub payload: (),
  pub environment: String,
  pub description: Option<String>,
  pub creator: User,
  pub created_at: String,
  pub updated_at: String,
  pub statuses_url: String,
  pub repository_url: String,
}

#[derive(Debug, Deserialize)]
pub struct DeploymentStatus1 {
  pub url: String,
  pub id: i64,
  pub node_id: String,
  pub state: String,
  pub creator: User,
  pub description: Option<String>,
  pub target_url: Option<String>,
  pub created_at: String,
  pub updated_at: String,
  pub deployment_url: String,
  pub repository_url: String,
}

#[derive(Debug, Deserialize)]
pub struct Error {
  pub message: String,
}

#[derive(Debug, Deserialize)]
pub struct FirstPatchedVersion {
  pub identifier: String,
}

#[derive(Debug, Deserialize)]
pub struct Forkee {
  pub id: i64,
  pub node_id: String,
  pub name: String,
  pub full_name: String,
  pub owner: User,
  pub private: bool,
  pub html_url: String,
  pub description: Option<String>,
  pub fork: bool,
  pub url: String,
  pub forks_url: String,
  pub keys_url: String,
  pub collaborators_url: String,
  pub teams_url: String,
  pub hooks_url: String,
  pub issue_events_url: String,
  pub events_url: String,
  pub assignees_url: String,
  pub branches_url: String,
  pub tags_url: String,
  pub blobs_url: String,
  pub git_tags_url: String,
  pub git_refs_url: String,
  pub trees_url: String,
  pub statuses_url: String,
  pub languages_url: String,
  pub stargazers_url: String,
  pub contributors_url: String,
  pub subscribers_url: String,
  pub subscription_url: String,
  pub commits_url: String,
  pub git_commits_url: String,
  pub comments_url: String,
  pub issue_comment_url: String,
  pub contents_url: String,
  pub compare_url: String,
  pub merges_url: String,
  pub archive_url: String,
  pub downloads_url: String,
  pub issues_url: String,
  pub pulls_url: String,
  pub milestones_url: String,
  pub notifications_url: String,
  pub labels_url: String,
  pub releases_url: String,
  pub deployments_url: String,
  pub created_at: String,
  pub updated_at: String,
  pub pushed_at: String,
  pub git_url: String,
  pub ssh_url: String,
  pub clone_url: String,
  pub svn_url: String,
  pub homepage: Option<String>,
  pub size: i64,
  pub stargazers_count: i64,
  pub watchers_count: i64,
  pub language: Option<String>,
  pub has_issues: bool,
  pub has_projects: bool,
  pub has_downloads: bool,
  pub has_wiki: bool,
  pub has_pages: bool,
  pub forks_count: i64,
  pub mirror_url: Option<String>,
  pub archived: bool,
  pub open_issues_count: i64,
  pub license: String,
  pub forks: i64,
  pub open_issues: i64,
  pub watchers: i64,
  pub default_branch: String,
  pub public: bool,
}

#[derive(Debug, Deserialize)]
pub struct Head {
  pub label: String,
  #[serde(rename = "ref")]
  pub _ref: String,
  pub sha: String,
  pub user: User,
  pub repo: Repo,
}

#[derive(Debug, Deserialize)]
pub struct HeadCommit {
  pub id: String,
  pub tree_id: String,
  pub message: String,
  pub timestamp: String,
  pub author: Author,
  pub committer: Author,
}

#[derive(Debug, Deserialize)]
pub struct Identifiers {
  pub value: String,
  #[serde(rename = "type")]
  pub _type: String,
}

#[derive(Debug, Deserialize)]
pub struct Installation {
  pub id: i64,
}

#[derive(Debug, Deserialize)]
pub struct Installation1 {
  pub id: i64,
  pub node_id: String,
}

#[derive(Debug, Deserialize)]
pub struct Installation3 {
  pub id: i64,
  pub account: User,
  pub repository_selection: String,
  pub access_tokens_url: String,
  pub repositories_url: String,
  pub html_url: String,
  pub app_id: i64,
  pub target_id: i64,
  pub target_type: String,
  pub permissions: Permissions,
  pub events: Vec<String>,
  pub created_at: i64,
  pub updated_at: i64,
  pub single_file_name: String,
}

#[derive(Debug, Deserialize)]
pub struct Issue {
  pub url: String,
  pub repository_url: String,
  pub labels_url: String,
  pub comments_url: String,
  pub events_url: String,
  pub html_url: String,
  pub id: i64,
  pub node_id: String,
  pub number: i64,
  pub title: String,
  pub user: User,
  pub labels: Vec<Labels>,
  pub state: String,
  pub locked: bool,
  pub assignee: Option<User>,
  pub assignees: Vec<User>,
  pub milestone: Option<String>,
  pub comments: i64,
  pub created_at: String,
  pub updated_at: String,
  pub closed_at: Option<String>,
  pub author_association: String,
  pub body: Option<String>,
}

#[derive(Debug, Deserialize)]
pub struct Labels {
  pub id: i64,
  pub node_id: String,
  pub url: String,
  pub name: String,
  pub color: String,
  pub default: bool,
}

#[derive(Debug, Deserialize)]
pub struct License {
  pub key: String,
  pub name: String,
  pub spdx_id: String,
  pub url: String,
  pub node_id: String,
}

#[derive(Debug, Deserialize)]
pub struct Link {
  pub href: String,
}

#[derive(Debug, Deserialize)]
pub struct Links {
  #[serde(rename = "self")]
  pub _self: Link,
  pub html: Link,
  pub issue: Link,
  pub comments: Link,
  pub review_comments: Link,
  pub review_comment: Link,
  pub commits: Link,
  pub statuses: Link,
}

#[derive(Debug, Deserialize)]
pub struct Links1 {
  pub html: Link,
  pub pull_request: Link,
}

#[derive(Debug, Deserialize)]
pub struct Links2 {
  #[serde(rename = "self")]
  pub _self: Link,
  pub html: Link,
  pub pull_request: Link,
}

#[derive(Debug, Deserialize)]
pub struct MarketplacePurchase1 {
  pub account: Account,
  pub billing_cycle: String,
  pub unit_count: i64,
  pub on_free_trial: bool,
  pub free_trial_ends_on: String,
  pub next_billing_date: Option<String>,
  pub plan: Plan,
}

#[derive(Debug, Deserialize)]
pub struct Member {
  pub action: String,
  pub member: User,
  pub changes: Changes,
  pub repository: Repo,
  pub sender: User,
}

#[derive(Debug, Deserialize)]
pub struct Membership1 {
  pub url: String,
  pub state: String,
  pub role: String,
  pub organization_url: String,
  pub user: User,
}

#[derive(Debug, Deserialize)]
pub struct Milestone1 {
  pub url: String,
  pub html_url: String,
  pub labels_url: String,
  pub id: i64,
  pub node_id: String,
  pub number: i64,
  pub title: String,
  pub description: Option<String>,
  pub creator: User,
  pub open_issues: i64,
  pub closed_issues: i64,
  pub state: String,
  pub created_at: String,
  pub updated_at: String,
  pub due_on: String,
  pub closed_at: Option<String>,
}

#[derive(Debug, Deserialize)]
pub struct Organization {
  pub login: String,
  pub id: i64,
  pub node_id: String,
  pub url: String,
  pub repos_url: String,
  pub events_url: String,
  pub hooks_url: String,
  pub issues_url: String,
  pub members_url: String,
  pub public_members_url: String,
  pub avatar_url: String,
  pub description: Option<String>,
}

#[derive(Debug, Deserialize)]
pub struct Output {
  pub title: String,
  pub summary: Option<String>,
  pub text: String,
  pub annotations_count: i64,
  pub annotations_url: String,
}

#[derive(Debug, Deserialize)]
pub struct Owner {
  pub name: String,
  pub email: Option<String>,
  pub login: String,
  pub id: i64,
  pub node_id: String,
  pub avatar_url: String,
  pub gravatar_id: String,
  pub url: String,
  pub html_url: String,
  pub followers_url: String,
  pub following_url: String,
  pub gists_url: String,
  pub starred_url: String,
  pub subscriptions_url: String,
  pub organizations_url: String,
  pub repos_url: String,
  pub events_url: String,
  pub received_events_url: String,
  #[serde(rename = "type")]
  pub _type: String,
  pub site_admin: bool,
}

#[derive(Debug, Deserialize)]
pub struct Package {
  pub ecosystem: String,
  pub name: String,
}

#[derive(Debug, Deserialize)]
pub struct Pages {
  pub page_name: String,
  pub title: String,
  pub summary: Option<String>,
  pub action: String,
  pub sha: String,
  pub html_url: String,
}

#[derive(Debug, Deserialize)]
pub struct Permission {
  pub from: String,
}

#[derive(Debug, Deserialize)]
pub struct Permissions {
  pub metadata: String,
  pub contents: String,
  pub issues: String,
}

#[derive(Debug, Deserialize)]
pub struct Permissions1 {
  pub pull: bool,
  pub push: bool,
  pub admin: bool,
}

#[derive(Debug, Deserialize)]
pub struct Plan {
  pub id: i64,
  pub name: String,
  pub description: Option<String>,
  pub monthly_price_in_cents: i64,
  pub yearly_price_in_cents: i64,
  pub price_model: String,
  pub has_free_trial: bool,
  pub unit_name: String,
  pub bullets: Vec<String>,
}

#[derive(Debug, Deserialize)]
pub struct Project1 {
  pub owner_url: String,
  pub url: String,
  pub html_url: String,
  pub columns_url: String,
  pub id: i64,
  pub node_id: String,
  pub name: String,
  pub body: Option<String>,
  pub number: i64,
  pub state: String,
  pub creator: User,
  pub created_at: String,
  pub updated_at: String,
}

#[derive(Debug, Deserialize)]
pub struct ProjectCard1 {
  pub url: String,
  pub project_url: String,
  pub column_url: String,
  pub column_id: i64,
  pub id: i64,
  pub node_id: String,
  pub note: String,
  pub creator: User,
  pub created_at: String,
  pub updated_at: String,
}

#[derive(Debug, Deserialize)]
pub struct ProjectColumn1 {
  pub url: String,
  pub project_url: String,
  pub cards_url: String,
  pub id: i64,
  pub node_id: String,
  pub name: String,
  pub created_at: String,
  pub updated_at: String,
}

#[derive(Debug, Deserialize)]
pub struct PullRequest1 {
  pub url: String,
  pub id: i64,
  pub node_id: String,
  pub html_url: String,
  pub diff_url: String,
  pub patch_url: String,
  pub issue_url: String,
  pub number: i64,
  pub state: String,
  pub locked: bool,
  pub title: String,
  pub user: User,
  pub body: Option<String>,
  pub created_at: String,
  pub updated_at: String,
  pub closed_at: Option<String>,
  pub merged_at: Option<String>,
  pub merge_commit_sha: String,
  pub assignee: Option<User>,
  pub assignees: Vec<User>,
  pub requested_reviewers: Vec<User>,
  pub labels: Vec<Labels>,
  pub milestone: Option<String>,
  pub commits_url: String,
  pub review_comments_url: String,
  pub review_comment_url: String,
  pub comments_url: String,
  pub statuses_url: String,
  pub head: Head,
  pub base: Head,
  pub _links: Links,
  pub author_association: String,
}

#[derive(Debug, Deserialize)]
pub struct PullRequests {
  pub url: String,
  pub id: i64,
  pub node_id: String,
  pub html_url: String,
  pub diff_url: String,
  pub patch_url: String,
  pub issue_url: String,
  pub number: i64,
  pub state: String,
  pub locked: bool,
  pub title: String,
  pub user: User,
  pub body: Option<String>,
  pub created_at: String,
  pub updated_at: String,
  pub closed_at: Option<String>,
  pub merged_at: Option<String>,
  pub merge_commit_sha: String,
  pub assignee: Option<User>,
  pub assignees: Vec<User>,
  pub requested_reviewers: Vec<User>,
  pub labels: Vec<Labels>,
  pub milestone: Option<String>,
  pub commits_url: String,
  pub review_comments_url: String,
  pub review_comment_url: String,
  pub comments_url: String,
  pub statuses_url: String,
  pub head: Head,
  pub base: Head,
  pub _links: Links,
  pub author_association: String,
  pub merged: bool,
  pub mergeable: bool,
  pub rebaseable: bool,
  pub mergeable_state: String,
  pub merged_by: String,
  pub comments: i64,
  pub review_comments: i64,
  pub maintainer_can_modify: bool,
  pub commits: i64,
  pub additions: i64,
  pub deletions: i64,
  pub changed_files: i64,
}

#[derive(Debug, Deserialize)]
pub struct References {
  pub url: String,
}

#[derive(Debug, Deserialize)]
pub struct Release1 {
  pub url: String,
  pub assets_url: String,
  pub upload_url: String,
  pub html_url: String,
  pub id: i64,
  pub node_id: String,
  pub tag_name: Option<String>,
  pub target_commitish: String,
  pub name: Option<String>,
  pub draft: bool,
  pub author: User,
  pub prerelease: bool,
  pub created_at: String,
  pub published_at: String,
  pub tarball_url: String,
  pub zipball_url: String,
  pub body: Option<String>,
}

#[derive(Debug, Deserialize)]
pub struct Repo {
  pub id: i64,
  pub node_id: String,
  pub name: String,
  pub full_name: String,
  pub private: bool,
  pub owner: User,
  pub html_url: String,
  pub description: Option<String>,
  pub fork: bool,
  pub url: String,
  pub forks_url: String,
  pub keys_url: String,
  pub collaborators_url: String,
  pub teams_url: String,
  pub hooks_url: String,
  pub issue_events_url: String,
  pub events_url: String,
  pub assignees_url: String,
  pub branches_url: String,
  pub tags_url: String,
  pub blobs_url: String,
  pub git_tags_url: String,
  pub git_refs_url: String,
  pub trees_url: String,
  pub statuses_url: String,
  pub languages_url: String,
  pub stargazers_url: String,
  pub contributors_url: String,
  pub subscribers_url: String,
  pub subscription_url: String,
  pub commits_url: String,
  pub git_commits_url: String,
  pub comments_url: String,
  pub issue_comment_url: String,
  pub contents_url: String,
  pub compare_url: String,
  pub merges_url: String,
  pub archive_url: String,
  pub downloads_url: String,
  pub issues_url: String,
  pub pulls_url: String,
  pub milestones_url: String,
  pub notifications_url: String,
  pub labels_url: String,
  pub releases_url: String,
  pub deployments_url: String,
  pub created_at: String,
  pub updated_at: String,
  pub pushed_at: String,
  pub git_url: String,
  pub ssh_url: String,
  pub clone_url: String,
  pub svn_url: String,
  pub homepage: Option<String>,
  pub size: i64,
  pub stargazers_count: i64,
  pub watchers_count: i64,
  pub language: Option<String>,
  pub has_issues: bool,
  pub has_projects: bool,
  pub has_downloads: bool,
  pub has_wiki: bool,
  pub has_pages: bool,
  pub forks_count: i64,
  pub mirror_url: Option<String>,
  pub archived: bool,
  pub open_issues_count: i64,
  pub license: String,
  pub forks: i64,
  pub open_issues: i64,
  pub watchers: i64,
  pub default_branch: String,
}

#[derive(Debug, Deserialize)]
pub struct Repositories {
  pub id: i64,
  pub name: String,
  pub full_name: String,
  pub private: bool,
}

#[derive(Debug, Deserialize)]
pub struct Repository {
  pub id: i64,
  pub node_id: String,
  pub name: String,
  pub full_name: String,
  pub owner: Owner,
  pub private: bool,
  pub html_url: String,
  pub description: Option<String>,
  pub fork: bool,
  pub url: String,
  pub forks_url: String,
  pub keys_url: String,
  pub collaborators_url: String,
  pub teams_url: String,
  pub hooks_url: String,
  pub issue_events_url: String,
  pub events_url: String,
  pub assignees_url: String,
  pub branches_url: String,
  pub tags_url: String,
  pub blobs_url: String,
  pub git_tags_url: String,
  pub git_refs_url: String,
  pub trees_url: String,
  pub statuses_url: String,
  pub languages_url: String,
  pub stargazers_url: String,
  pub contributors_url: String,
  pub subscribers_url: String,
  pub subscription_url: String,
  pub commits_url: String,
  pub git_commits_url: String,
  pub comments_url: String,
  pub issue_comment_url: String,
  pub contents_url: String,
  pub compare_url: String,
  pub merges_url: String,
  pub archive_url: String,
  pub downloads_url: String,
  pub issues_url: String,
  pub pulls_url: String,
  pub milestones_url: String,
  pub notifications_url: String,
  pub labels_url: String,
  pub releases_url: String,
  pub deployments_url: String,
  pub created_at: i64,
  pub updated_at: String,
  pub pushed_at: i64,
  pub git_url: String,
  pub ssh_url: String,
  pub clone_url: String,
  pub svn_url: String,
  pub homepage: Option<String>,
  pub size: i64,
  pub stargazers_count: i64,
  pub watchers_count: i64,
  pub language: Option<String>,
  pub has_issues: bool,
  pub has_projects: bool,
  pub has_downloads: bool,
  pub has_wiki: bool,
  pub has_pages: bool,
  pub forks_count: i64,
  pub mirror_url: Option<String>,
  pub archived: bool,
  pub open_issues_count: i64,
  pub license: String,
  pub forks: i64,
  pub open_issues: i64,
  pub watchers: i64,
  pub default_branch: String,
  pub stargazers: i64,
  pub master_branch: String,
}

#[derive(Debug, Deserialize)]
pub struct Repository2 {
  pub id: i64,
  pub node_id: String,
  pub name: String,
  pub full_name: String,
  pub owner: User,
  pub private: bool,
  pub html_url: String,
  pub description: Option<String>,
  pub fork: bool,
  pub url: String,
  pub forks_url: String,
  pub keys_url: String,
  pub collaborators_url: String,
  pub teams_url: String,
  pub hooks_url: String,
  pub issue_events_url: String,
  pub events_url: String,
  pub assignees_url: String,
  pub branches_url: String,
  pub tags_url: String,
  pub blobs_url: String,
  pub git_tags_url: String,
  pub git_refs_url: String,
  pub trees_url: String,
  pub statuses_url: String,
  pub languages_url: String,
  pub stargazers_url: String,
  pub contributors_url: String,
  pub subscribers_url: String,
  pub subscription_url: String,
  pub commits_url: String,
  pub git_commits_url: String,
  pub comments_url: String,
  pub issue_comment_url: String,
  pub contents_url: String,
  pub compare_url: String,
  pub merges_url: String,
  pub archive_url: String,
  pub downloads_url: String,
  pub issues_url: String,
  pub pulls_url: String,
  pub milestones_url: String,
  pub notifications_url: String,
  pub labels_url: String,
  pub releases_url: String,
  pub deployments_url: String,
  pub created_at: String,
  pub updated_at: String,
  pub pushed_at: String,
  pub git_url: String,
  pub ssh_url: String,
  pub clone_url: String,
  pub svn_url: String,
  pub homepage: Option<String>,
  pub size: i64,
  pub stargazers_count: i64,
  pub watchers_count: i64,
  pub language: Option<String>,
  pub has_issues: bool,
  pub has_projects: bool,
  pub has_downloads: bool,
  pub has_wiki: bool,
  pub has_pages: bool,
  pub forks_count: i64,
  pub mirror_url: Option<String>,
  pub archived: bool,
  pub open_issues_count: i64,
  pub license: String,
  pub forks: i64,
  pub open_issues: i64,
  pub watchers: i64,
  pub default_branch: String,
  pub permissions: Permissions1,
}

#[derive(Debug, Deserialize)]
pub struct Review {
  pub id: i64,
  pub node_id: String,
  pub user: User,
  pub body: Option<String>,
  pub commit_id: String,
  pub submitted_at: String,
  pub state: String,
  pub html_url: String,
  pub pull_request_url: String,
  pub author_association: String,
  pub _links: Links1,
}

#[derive(Debug, Deserialize)]
pub struct SecurityAdvisory1 {
  pub ghsa_id: String,
  pub summary: Option<String>,
  pub description: Option<String>,
  pub severity: String,
  pub identifiers: Vec<Identifiers>,
  pub references: Vec<References>,
  pub published_at: String,
  pub updated_at: String,
  pub withdrawn_at: String,
  pub vulnerabilities: Vec<Vulnerabilities>,
}

#[derive(Debug, Deserialize)]
pub struct Sender {
  pub login: String,
  pub id: i64,
  pub avatar_url: String,
  pub gravatar_id: String,
  pub url: String,
  pub html_url: String,
  pub followers_url: String,
  pub following_url: String,
  pub gists_url: String,
  pub starred_url: String,
  pub subscriptions_url: String,
  pub organizations_url: String,
  pub repos_url: String,
  pub events_url: String,
  pub received_events_url: String,
  #[serde(rename = "type")]
  pub _type: String,
  pub site_admin: bool,
  pub email: Option<String>,
}

#[derive(Debug, Deserialize)]
pub struct Team {
  pub name: String,
  pub id: i64,
  pub node_id: String,
  pub slug: String,
  pub description: Option<String>,
  pub privacy: String,
  pub url: String,
  pub members_url: String,
  pub repositories_url: String,
  pub permission: String,
}

#[derive(Debug, Deserialize)]
pub struct Tree {
  pub sha: String,
  pub url: String,
}

#[derive(Debug, Deserialize)]
pub struct User {
  pub login: String,
  pub id: i64,
  pub node_id: String,
  pub avatar_url: String,
  pub gravatar_id: String,
  pub url: String,
  pub html_url: String,
  pub followers_url: String,
  pub following_url: String,
  pub gists_url: String,
  pub starred_url: String,
  pub subscriptions_url: String,
  pub organizations_url: String,
  pub repos_url: String,
  pub events_url: String,
  pub received_events_url: String,
  #[serde(rename = "type")]
  pub _type: String,
  pub site_admin: bool,
}

#[derive(Debug, Deserialize)]
pub struct Verification {
  pub verified: bool,
  pub reason: String,
  pub signature: String,
  pub payload: String,
}

#[derive(Debug, Deserialize)]
pub struct Vulnerabilities {
  pub package: Package,
  pub severity: String,
  pub vulnerable_version_range: String,
  pub first_patched_version: FirstPatchedVersion,
}
